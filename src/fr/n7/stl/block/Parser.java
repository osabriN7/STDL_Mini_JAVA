
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20141204 (SVN rev 60)
//----------------------------------------------------

package fr.n7.stl.block;

import java_cup.runtime.*;
import fr.n7.stl.block.Lexer;
import java.io.IOException;
import java.io.File;
import java.io.FileInputStream;
import java.util.*;
import fr.n7.stl.block.ast.*;
import fr.n7.stl.block.ast.object.*;
import fr.n7.stl.block.ast.expression.*;
import fr.n7.stl.block.ast.expression.accessible.*;
import fr.n7.stl.block.ast.expression.allocation.*;
import fr.n7.stl.block.ast.expression.assignable.*;
import fr.n7.stl.block.ast.expression.value.*;
import fr.n7.stl.block.ast.instruction.*;
import fr.n7.stl.block.ast.instruction.declaration.*;
import fr.n7.stl.block.ast.scope.*;
import fr.n7.stl.block.ast.type.*;
import fr.n7.stl.tam.ast.impl.*;
import fr.n7.stl.tam.ast.*;
import fr.n7.stl.util.*;
import java_cup.runtime.ComplexSymbolFactory.Location;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20141204 (SVN rev 60) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\166\000\002\002\003\000\002\002\004\000\002\003" +
    "\004\000\002\003\003\000\002\020\003\000\002\020\003" +
    "\000\002\021\007\000\002\021\011\000\002\022\012\000" +
    "\002\041\003\000\002\041\003\000\002\041\002\000\002" +
    "\042\004\000\002\042\002\000\002\043\004\000\002\043" +
    "\002\000\002\033\006\000\002\033\003\000\002\034\005" +
    "\000\002\034\003\000\002\035\003\000\002\035\005\000" +
    "\002\024\004\000\002\024\002\000\002\025\005\000\002" +
    "\023\007\000\002\023\005\000\002\023\007\000\002\023" +
    "\010\000\002\023\011\000\002\036\004\000\002\036\002" +
    "\000\002\037\010\000\002\026\003\000\002\026\003\000" +
    "\002\032\003\000\002\032\003\000\002\032\004\000\002" +
    "\032\002\000\002\027\003\000\002\027\005\000\002\030" +
    "\003\000\002\030\005\000\002\031\003\000\002\031\006" +
    "\000\002\040\003\000\002\040\003\000\002\004\005\000" +
    "\002\015\003\000\002\015\003\000\002\015\003\000\002" +
    "\015\003\000\002\014\003\000\002\014\003\000\002\005" +
    "\004\000\002\005\002\000\002\012\003\000\002\012\002" +
    "\000\002\011\006\000\002\011\004\000\002\013\003\000" +
    "\002\013\005\000\002\013\005\000\002\007\007\000\002" +
    "\006\003\000\002\006\006\000\002\006\004\000\002\006" +
    "\011\000\002\006\007\000\002\006\007\000\002\006\005" +
    "\000\002\006\007\000\002\010\005\000\002\010\003\000" +
    "\002\017\003\000\002\017\006\000\002\017\005\000\002" +
    "\017\005\000\002\017\005\000\002\016\005\000\002\016" +
    "\005\000\002\016\005\000\002\016\005\000\002\016\005" +
    "\000\002\016\005\000\002\016\005\000\002\016\005\000" +
    "\002\016\005\000\002\016\005\000\002\016\005\000\002" +
    "\016\005\000\002\016\005\000\002\016\004\000\002\016" +
    "\004\000\002\016\006\000\002\016\007\000\002\016\005" +
    "\000\002\016\006\000\002\016\005\000\002\016\003\000" +
    "\002\016\003\000\002\016\003\000\002\016\003\000\002" +
    "\016\003\000\002\016\003\000\002\016\003\000\002\016" +
    "\007\000\002\016\005\000\002\016\006\000\002\016\003" +
    "\000\002\016\006\000\002\016\007\000\002\044\007\000" +
    "\002\044\010\000\002\044\005\000\002\044\005\000\002" +
    "\044\007\000\002\044\010" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\361\000\012\073\ufff6\075\012\100\005\102\010\001" +
    "\002\000\014\002\ufffe\073\ufffe\075\ufffe\100\ufffe\102\ufffe" +
    "\001\002\000\004\073\ufff8\001\002\000\014\002\001\073" +
    "\ufff6\075\012\100\005\102\010\001\002\000\014\002\ufffc" +
    "\073\ufffc\075\ufffc\100\ufffc\102\ufffc\001\002\000\004\073" +
    "\ufff7\001\002\000\014\002\ufffd\073\ufffd\075\ufffd\100\ufffd" +
    "\102\ufffd\001\002\000\004\062\020\001\002\000\004\073" +
    "\016\001\002\000\004\002\015\001\002\000\004\002\000" +
    "\001\002\000\004\062\020\001\002\000\010\032\ufff4\072" +
    "\044\074\ufff4\001\002\000\012\032\ufff0\036\021\072\ufff0" +
    "\074\ufff0\001\002\000\004\062\023\001\002\000\006\005" +
    "\041\037\042\001\002\000\010\005\uffed\037\uffed\072\025" +
    "\001\002\000\006\005\uffee\037\uffee\001\002\000\004\062" +
    "\030\001\002\000\010\005\uffec\025\037\037\uffec\001\002" +
    "\000\010\005\uffd8\025\uffd8\037\uffd8\001\002\000\024\005" +
    "\uffd6\025\uffd6\030\uffd6\032\uffd6\034\uffd6\036\031\037\uffd6" +
    "\062\uffd6\074\uffd6\001\002\000\004\062\030\001\002\000" +
    "\012\005\uffda\032\uffda\037\uffda\074\uffda\001\002\000\006" +
    "\005\034\037\035\001\002\000\004\062\030\001\002\000" +
    "\022\005\uffd5\025\uffd5\030\uffd5\032\uffd5\034\uffd5\037\uffd5" +
    "\062\uffd5\074\uffd5\001\002\000\012\005\uffd9\032\uffd9\037" +
    "\uffd9\074\uffd9\001\002\000\004\062\030\001\002\000\010" +
    "\005\uffd7\025\uffd7\037\uffd7\001\002\000\004\062\023\001" +
    "\002\000\010\032\ufff1\072\ufff1\074\ufff1\001\002\000\006" +
    "\005\uffef\037\uffef\001\002\000\004\062\030\001\002\000" +
    "\006\032\ufff2\074\047\001\002\000\004\032\051\001\002" +
    "\000\004\062\030\001\002\000\006\005\034\032\ufff3\001" +
    "\002\000\010\033\uffea\076\uffea\077\uffea\001\002\000\010" +
    "\033\057\076\055\077\056\001\002\000\024\054\uffdb\055" +
    "\uffdb\056\uffdb\057\uffdb\061\uffdb\062\uffdb\100\060\101\061" +
    "\102\uffdb\001\002\000\010\033\uffeb\076\uffeb\077\uffeb\001" +
    "\002\000\024\054\uffe0\055\uffe0\056\uffe0\057\uffe0\061\uffe0" +
    "\062\uffe0\100\uffe0\101\uffe0\102\uffe0\001\002\000\024\054" +
    "\uffdf\055\uffdf\056\uffdf\057\uffdf\061\uffdf\062\uffdf\100\uffdf" +
    "\101\uffdf\102\uffdf\001\002\000\014\002\ufff9\073\ufff9\075" +
    "\ufff9\100\ufff9\102\ufff9\001\002\000\020\054\uffdd\055\uffdd" +
    "\056\uffdd\057\uffdd\061\uffdd\062\uffdd\102\uffdd\001\002\000" +
    "\022\054\uffde\055\uffde\056\uffde\057\uffde\061\uffde\062\uffde" +
    "\100\341\102\uffde\001\002\000\020\054\073\055\066\056" +
    "\075\057\070\061\071\062\065\102\067\001\002\000\004" +
    "\062\uffd3\001\002\000\010\030\uffcc\034\uffcc\062\uffcc\001" +
    "\002\000\010\030\335\036\031\062\uffd6\001\002\000\010" +
    "\030\uffd0\034\uffd0\062\uffd0\001\002\000\016\054\073\055" +
    "\066\056\075\057\070\061\071\062\030\001\002\000\010" +
    "\030\uffce\034\uffce\062\uffce\001\002\000\004\062\uffd4\001" +
    "\002\000\004\062\077\001\002\000\010\030\uffd1\034\uffd1" +
    "\062\uffd1\001\002\000\010\033\uffe9\076\uffe9\077\uffe9\001" +
    "\002\000\010\030\uffcf\034\uffcf\062\uffcf\001\002\000\010" +
    "\030\uffcd\034\uffcd\062\uffcd\001\002\000\010\004\101\012" +
    "\100\030\102\001\002\000\032\011\140\020\155\030\154" +
    "\032\151\047\145\062\146\063\141\064\150\065\152\067" +
    "\144\070\143\071\142\001\002\000\010\033\uffe7\076\uffe7" +
    "\077\uffe7\001\002\000\016\031\uffc8\054\073\055\066\056" +
    "\075\057\070\062\030\001\002\000\006\030\112\062\111" +
    "\001\002\000\004\031\117\001\002\000\006\005\106\031" +
    "\uffc9\001\002\000\014\054\073\055\066\056\075\057\070" +
    "\062\030\001\002\000\006\030\112\062\111\001\002\000" +
    "\010\005\uffc7\031\uffc7\034\115\001\002\000\012\005\uffc5" +
    "\012\uffc5\031\uffc5\034\uffc5\001\002\000\006\030\112\062" +
    "\111\001\002\000\006\031\114\034\115\001\002\000\012" +
    "\005\uffc3\012\uffc3\031\uffc3\034\uffc3\001\002\000\004\035" +
    "\116\001\002\000\012\005\uffc4\012\uffc4\031\uffc4\034\uffc4" +
    "\001\002\000\004\032\120\001\002\000\030\030\uffca\033" +
    "\uffca\044\uffca\046\uffca\051\uffca\052\uffca\054\uffca\055\uffca" +
    "\056\uffca\057\uffca\062\uffca\001\002\000\010\033\uffe5\076" +
    "\uffe5\077\uffe5\001\002\000\030\030\126\033\134\044\127" +
    "\046\135\051\124\052\136\054\073\055\066\056\075\057" +
    "\070\062\130\001\002\000\030\030\uffcb\033\uffcb\044\uffcb" +
    "\046\uffcb\051\uffcb\052\uffcb\054\uffcb\055\uffcb\056\uffcb\057" +
    "\uffcb\062\uffcb\001\002\000\032\011\140\020\155\030\154" +
    "\032\151\047\145\062\146\063\141\064\150\065\152\067" +
    "\144\070\143\071\142\001\002\000\030\030\uffc1\033\uffc1" +
    "\044\uffc1\046\uffc1\051\uffc1\052\uffc1\054\uffc1\055\uffc1\056" +
    "\uffc1\057\uffc1\062\uffc1\001\002\000\006\030\126\062\317" +
    "\001\002\000\004\030\310\001\002\000\016\006\306\012" +
    "\uffb7\030\uffd6\034\uffb7\036\031\062\uffd6\001\002\000\006" +
    "\004\303\006\304\001\002\000\006\030\112\062\111\001" +
    "\002\000\006\012\271\034\272\001\002\000\036\030\uffd2" +
    "\033\uffd2\044\uffd2\045\uffd2\046\uffd2\051\uffd2\052\uffd2\054" +
    "\uffd2\055\uffd2\056\uffd2\057\uffd2\062\uffd2\076\uffd2\077\uffd2" +
    "\001\002\000\004\030\265\001\002\000\004\030\137\001" +
    "\002\000\032\011\140\020\155\030\154\032\151\047\145" +
    "\062\146\063\141\064\150\065\152\067\144\070\143\071" +
    "\142\001\002\000\032\011\140\020\155\030\154\032\151" +
    "\047\145\062\146\063\141\064\150\065\152\067\144\070" +
    "\143\071\142\001\002\000\054\004\uff98\005\uff98\007\uff98" +
    "\010\uff98\017\uff98\020\uff98\022\uff98\023\uff98\024\uff98\026" +
    "\uff98\027\uff98\031\uff98\033\uff98\034\uff98\035\uff98\036\uff98" +
    "\037\uff98\040\uff98\041\uff98\042\uff98\043\uff98\001\002\000" +
    "\054\004\uff9b\005\uff9b\007\uff9b\010\uff9b\017\uff9b\020\uff9b" +
    "\022\uff9b\023\uff9b\024\uff9b\026\uff9b\027\uff9b\031\uff9b\033" +
    "\uff9b\034\uff9b\035\uff9b\036\uff9b\037\uff9b\040\uff9b\041\uff9b" +
    "\042\uff9b\043\uff9b\001\002\000\054\004\uff9c\005\uff9c\007" +
    "\uff9c\010\uff9c\017\uff9c\020\uff9c\022\uff9c\023\uff9c\024\uff9c" +
    "\026\uff9c\027\uff9c\031\uff9c\033\uff9c\034\uff9c\035\uff9c\036" +
    "\uff9c\037\uff9c\040\uff9c\041\uff9c\042\uff9c\043\uff9c\001\002" +
    "\000\054\004\uff9a\005\uff9a\007\uff9a\010\uff9a\017\uff9a\020" +
    "\uff9a\022\uff9a\023\uff9a\024\uff9a\026\uff9a\027\uff9a\031\uff9a" +
    "\033\uff9a\034\uff9a\035\uff9a\036\uff9a\037\uff9a\040\uff9a\041" +
    "\uff9a\042\uff9a\043\uff9a\001\002\000\014\054\073\055\066" +
    "\056\075\057\070\062\030\001\002\000\060\004\uff9e\005" +
    "\uff9e\006\225\007\uff9e\010\uff9e\017\uff9e\020\uff9e\022\uff9e" +
    "\023\uff9e\024\uff9e\026\uff9e\027\uff9e\030\224\031\uff9e\033" +
    "\uff9e\034\uff9e\035\uff9e\036\uff9e\037\uff9e\040\uff9e\041\uff9e" +
    "\042\uff9e\043\uff9e\001\002\000\042\010\172\017\161\020" +
    "\174\022\171\023\164\024\165\026\157\027\160\031\252" +
    "\034\163\036\167\037\175\040\170\041\173\042\162\043" +
    "\166\001\002\000\054\004\uff99\005\uff99\007\uff99\010\uff99" +
    "\017\uff99\020\uff99\022\uff99\023\uff99\024\uff99\026\uff99\027" +
    "\uff99\031\uff99\033\uff99\034\uff99\035\uff99\036\uff99\037\uff99" +
    "\040\uff99\041\uff99\042\uff99\043\uff99\001\002\000\032\011" +
    "\140\020\155\030\154\032\151\047\145\062\146\063\141" +
    "\064\150\065\152\067\144\070\143\071\142\001\002\000" +
    "\054\004\uff9d\005\uff9d\007\uff9d\010\uff9d\017\uff9d\020\uff9d" +
    "\022\uff9d\023\uff9d\024\uff9d\026\uff9d\027\uff9d\031\uff9d\033" +
    "\uff9d\034\uff9d\035\uff9d\036\uff9d\037\uff9d\040\uff9d\041\uff9d" +
    "\042\uff9d\043\uff9d\001\002\000\056\004\uff94\005\uff94\006" +
    "\242\007\uff94\010\uff94\017\uff94\020\uff94\022\uff94\023\uff94" +
    "\024\uff94\026\uff94\027\uff94\031\uff94\033\uff94\034\uff94\035" +
    "\uff94\036\uff94\037\uff94\040\uff94\041\uff94\042\uff94\043\uff94" +
    "\001\002\000\032\011\140\020\155\030\154\032\151\047" +
    "\145\062\220\063\141\064\150\065\152\067\144\070\143" +
    "\071\142\001\002\000\032\011\140\020\155\030\154\032" +
    "\151\047\145\062\146\063\141\064\150\065\152\067\144" +
    "\070\143\071\142\001\002\000\054\004\uffa5\005\uffa5\007" +
    "\uffa5\010\uffa5\017\uffa5\020\uffa5\022\171\023\164\024\165" +
    "\026\uffa5\027\uffa5\031\uffa5\033\uffa5\034\163\035\uffa5\036" +
    "\uffa5\037\uffa5\040\uffa5\041\uffa5\042\uffa5\043\uffa5\001\002" +
    "\000\032\011\140\020\155\030\154\032\151\047\145\062" +
    "\146\063\141\064\150\065\152\067\144\070\143\071\142" +
    "\001\002\000\032\011\140\020\155\030\154\032\151\047" +
    "\145\062\146\063\141\064\150\065\152\067\144\070\143" +
    "\071\142\001\002\000\032\011\140\020\155\030\154\032" +
    "\151\047\145\062\146\063\141\064\150\065\152\067\144" +
    "\070\143\071\142\001\002\000\032\011\140\020\155\030" +
    "\154\032\151\047\145\062\146\063\141\064\150\065\152" +
    "\067\144\070\143\071\142\001\002\000\032\011\140\020" +
    "\155\030\154\032\151\047\145\062\146\063\141\064\150" +
    "\065\152\067\144\070\143\071\142\001\002\000\032\011" +
    "\140\020\155\030\154\032\151\047\145\062\146\063\141" +
    "\064\150\065\152\067\144\070\143\071\142\001\002\000" +
    "\032\011\140\020\155\030\154\032\151\047\145\062\146" +
    "\063\141\064\150\065\152\067\144\070\143\071\142\001" +
    "\002\000\032\011\140\020\155\030\154\032\151\047\145" +
    "\062\146\063\141\064\150\065\152\067\144\070\143\071" +
    "\142\001\002\000\032\011\140\020\155\030\154\032\151" +
    "\047\145\062\146\063\141\064\150\065\152\067\144\070" +
    "\143\071\142\001\002\000\032\011\140\020\155\030\154" +
    "\032\151\047\145\062\146\063\141\064\150\065\152\067" +
    "\144\070\143\071\142\001\002\000\032\011\140\020\155" +
    "\030\154\032\151\047\145\062\146\063\141\064\150\065" +
    "\152\067\144\070\143\071\142\001\002\000\032\011\140" +
    "\020\155\030\154\032\151\047\145\062\146\063\141\064" +
    "\150\065\152\067\144\070\143\071\142\001\002\000\032" +
    "\011\140\020\155\030\154\032\151\047\145\062\146\063" +
    "\141\064\150\065\152\067\144\070\143\071\142\001\002" +
    "\000\032\011\140\020\155\030\154\032\151\047\145\062" +
    "\146\063\141\064\150\065\152\067\144\070\143\071\142" +
    "\001\002\000\032\011\140\020\155\030\154\032\151\047" +
    "\145\062\146\063\141\064\150\065\152\067\144\070\143" +
    "\071\142\001\002\000\044\004\uffaf\005\uffaf\007\uffaf\010" +
    "\uffaf\017\161\020\174\022\171\023\164\024\165\026\uffaf" +
    "\027\uffaf\031\uffaf\033\uffaf\034\163\035\uffaf\042\uffaf\043" +
    "\uffaf\001\002\000\054\004\uffa9\005\uffa9\007\uffa9\010\uffa9" +
    "\017\uffa9\020\uffa9\022\171\023\164\024\165\026\uffa9\027" +
    "\uffa9\031\uffa9\033\uffa9\034\163\035\uffa9\036\uffa9\037\uffa9" +
    "\040\uffa9\041\uffa9\042\uffa9\043\uffa9\001\002\000\044\004" +
    "\uffad\005\uffad\007\uffad\010\uffad\017\161\020\174\022\171" +
    "\023\164\024\165\026\uffad\027\uffad\031\uffad\033\uffad\034" +
    "\163\035\uffad\042\uffad\043\uffad\001\002\000\042\007\202" +
    "\010\172\017\161\020\174\022\171\023\164\024\165\026" +
    "\157\027\160\034\163\036\167\037\175\040\170\041\173" +
    "\042\162\043\166\001\002\000\032\011\140\020\155\030" +
    "\154\032\151\047\145\062\146\063\141\064\150\065\152" +
    "\067\144\070\143\071\142\001\002\000\052\004\uffa2\005" +
    "\uffa2\007\uffa2\017\161\020\174\022\171\023\164\024\165" +
    "\026\157\027\160\031\uffa2\033\uffa2\034\163\035\uffa2\036" +
    "\167\037\175\040\170\041\173\042\162\043\166\001\002" +
    "\000\054\004\uffa8\005\uffa8\007\uffa8\010\uffa8\017\uffa8\020" +
    "\uffa8\022\uffa8\023\uffa8\024\uffa8\026\uffa8\027\uffa8\031\uffa8" +
    "\033\uffa8\034\163\035\uffa8\036\uffa8\037\uffa8\040\uffa8\041" +
    "\uffa8\042\uffa8\043\uffa8\001\002\000\044\004\uffae\005\uffae" +
    "\007\uffae\010\uffae\017\161\020\174\022\171\023\164\024" +
    "\165\026\uffae\027\uffae\031\uffae\033\uffae\034\163\035\uffae" +
    "\042\uffae\043\uffae\001\002\000\044\004\uffb0\005\uffb0\007" +
    "\uffb0\010\uffb0\017\161\020\174\022\171\023\164\024\165" +
    "\026\uffb0\027\uffb0\031\uffb0\033\uffb0\034\163\035\uffb0\042" +
    "\uffb0\043\uffb0\001\002\000\050\004\uffb1\005\uffb1\007\uffb1" +
    "\010\uffb1\017\161\020\174\022\171\023\164\024\165\026" +
    "\uffb1\027\uffb1\031\uffb1\033\uffb1\034\163\035\uffb1\036\167" +
    "\037\175\040\170\041\173\001\002\000\054\004\uffa6\005" +
    "\uffa6\007\uffa6\010\uffa6\017\uffa6\020\uffa6\022\uffa6\023\uffa6" +
    "\024\uffa6\026\uffa6\027\uffa6\031\uffa6\033\uffa6\034\163\035" +
    "\uffa6\036\uffa6\037\uffa6\040\uffa6\041\uffa6\042\uffa6\043\uffa6" +
    "\001\002\000\054\004\uffa7\005\uffa7\007\uffa7\010\uffa7\017" +
    "\uffa7\020\uffa7\022\uffa7\023\uffa7\024\uffa7\026\uffa7\027\uffa7" +
    "\031\uffa7\033\uffa7\034\163\035\uffa7\036\uffa7\037\uffa7\040" +
    "\uffa7\041\uffa7\042\uffa7\043\uffa7\001\002\000\042\010\172" +
    "\017\161\020\174\022\171\023\164\024\165\026\157\027" +
    "\160\034\163\035\213\036\167\037\175\040\170\041\173" +
    "\042\162\043\166\001\002\000\054\004\uffa3\005\uffa3\007" +
    "\uffa3\010\uffa3\017\uffa3\020\uffa3\022\uffa3\023\uffa3\024\uffa3" +
    "\026\uffa3\027\uffa3\031\uffa3\033\uffa3\034\uffa3\035\uffa3\036" +
    "\uffa3\037\uffa3\040\uffa3\041\uffa3\042\uffa3\043\uffa3\001\002" +
    "\000\050\004\uffb2\005\uffb2\007\uffb2\010\uffb2\017\161\020" +
    "\174\022\171\023\164\024\165\026\uffb2\027\uffb2\031\uffb2" +
    "\033\uffb2\034\163\035\uffb2\036\167\037\175\040\170\041" +
    "\173\001\002\000\054\004\uffaa\005\uffaa\007\uffaa\010\uffaa" +
    "\017\uffaa\020\uffaa\022\171\023\164\024\165\026\uffaa\027" +
    "\uffaa\031\uffaa\033\uffaa\034\163\035\uffaa\036\uffaa\037\uffaa" +
    "\040\uffaa\041\uffaa\042\uffaa\043\uffaa\001\002\000\054\004" +
    "\uffab\005\uffab\007\uffab\010\uffab\017\161\020\174\022\171" +
    "\023\164\024\165\026\uffab\027\uffab\031\uffab\033\uffab\034" +
    "\163\035\uffab\036\167\037\175\040\170\041\173\042\162" +
    "\043\166\001\002\000\054\004\uffac\005\uffac\007\uffac\010" +
    "\uffac\017\161\020\174\022\171\023\164\024\165\026\uffac" +
    "\027\160\031\uffac\033\uffac\034\163\035\uffac\036\167\037" +
    "\175\040\170\041\173\042\162\043\166\001\002\000\046" +
    "\006\225\010\uff9e\017\uff9e\020\uff9e\022\uff9e\023\uff9e\024" +
    "\uff9e\026\uff9e\027\uff9e\030\224\031\223\034\uff9e\036\uff9e" +
    "\037\uff9e\040\uff9e\041\uff9e\042\uff9e\043\uff9e\001\002\000" +
    "\042\010\172\017\161\020\174\022\171\023\164\024\165" +
    "\026\157\027\160\031\222\034\163\036\167\037\175\040" +
    "\170\041\173\042\162\043\166\001\002\000\054\004\uffa1" +
    "\005\uffa1\007\uffa1\010\uffa1\017\uffa1\020\uffa1\022\uffa1\023" +
    "\uffa1\024\uffa1\026\uffa1\027\uffa1\031\uffa1\033\uffa1\034\uffa1" +
    "\035\uffa1\036\uffa1\037\uffa1\040\uffa1\041\uffa1\042\uffa1\043" +
    "\uffa1\001\002\000\032\011\140\020\155\030\154\032\151" +
    "\047\145\062\146\063\141\064\150\065\152\067\144\070" +
    "\143\071\142\001\002\000\034\011\140\020\155\030\154" +
    "\031\236\032\151\047\145\062\146\063\141\064\150\065" +
    "\152\067\144\070\143\071\142\001\002\000\004\062\226" +
    "\001\002\000\060\004\uff8e\005\uff8e\006\uff8e\007\uff8e\010" +
    "\uff8e\017\uff8e\020\uff8e\022\uff8e\023\uff8e\024\uff8e\026\uff8e" +
    "\027\uff8e\030\227\031\uff8e\033\uff8e\034\uff8e\035\uff8e\036" +
    "\uff8e\037\uff8e\040\uff8e\041\uff8e\042\uff8e\043\uff8e\001\002" +
    "\000\034\011\140\020\155\030\154\031\230\032\151\047" +
    "\145\062\146\063\141\064\150\065\152\067\144\070\143" +
    "\071\142\001\002\000\056\004\uff8d\005\uff8d\006\uff8d\007" +
    "\uff8d\010\uff8d\017\uff8d\020\uff8d\022\uff8d\023\uff8d\024\uff8d" +
    "\026\uff8d\027\uff8d\031\uff8d\033\uff8d\034\uff8d\035\uff8d\036" +
    "\uff8d\037\uff8d\040\uff8d\041\uff8d\042\uff8d\043\uff8d\001\002" +
    "\000\046\005\uffb8\010\172\017\161\020\174\022\171\023" +
    "\164\024\165\026\157\027\160\031\uffb8\033\uffb8\034\163" +
    "\036\167\037\175\040\170\041\173\042\162\043\166\001" +
    "\002\000\006\005\233\031\234\001\002\000\032\011\140" +
    "\020\155\030\154\032\151\047\145\062\146\063\141\064" +
    "\150\065\152\067\144\070\143\071\142\001\002\000\056" +
    "\004\uff8c\005\uff8c\006\uff8c\007\uff8c\010\uff8c\017\uff8c\020" +
    "\uff8c\022\uff8c\023\uff8c\024\uff8c\026\uff8c\027\uff8c\031\uff8c" +
    "\033\uff8c\034\uff8c\035\uff8c\036\uff8c\037\uff8c\040\uff8c\041" +
    "\uff8c\042\uff8c\043\uff8c\001\002\000\046\005\uffb9\010\172" +
    "\017\161\020\174\022\171\023\164\024\165\026\157\027" +
    "\160\031\uffb9\033\uffb9\034\163\036\167\037\175\040\170" +
    "\041\173\042\162\043\166\001\002\000\054\004\uff96\005" +
    "\uff96\007\uff96\010\uff96\017\uff96\020\uff96\022\uff96\023\uff96" +
    "\024\uff96\026\uff96\027\uff96\031\uff96\033\uff96\034\uff96\035" +
    "\uff96\036\uff96\037\uff96\040\uff96\041\uff96\042\uff96\043\uff96" +
    "\001\002\000\006\005\233\031\240\001\002\000\054\004" +
    "\uff95\005\uff95\007\uff95\010\uff95\017\uff95\020\uff95\022\uff95" +
    "\023\uff95\024\uff95\026\uff95\027\uff95\031\uff95\033\uff95\034" +
    "\uff95\035\uff95\036\uff95\037\uff95\040\uff95\041\uff95\042\uff95" +
    "\043\uff95\001\002\000\054\004\uffa0\005\uffa0\007\uffa0\010" +
    "\172\017\161\020\174\022\171\023\164\024\165\026\157" +
    "\027\160\031\uffa0\033\uffa0\034\163\035\uffa0\036\167\037" +
    "\175\040\170\041\173\042\162\043\166\001\002\000\004" +
    "\062\243\001\002\000\060\004\uff8f\005\uff8f\006\uff8f\007" +
    "\uff8f\010\uff8f\017\uff8f\020\uff8f\022\uff8f\023\uff8f\024\uff8f" +
    "\026\uff8f\027\uff8f\030\244\031\uff8f\033\uff8f\034\uff8f\035" +
    "\uff8f\036\uff8f\037\uff8f\040\uff8f\041\uff8f\042\uff8f\043\uff8f" +
    "\001\002\000\034\011\140\020\155\030\154\031\245\032" +
    "\151\047\145\062\146\063\141\064\150\065\152\067\144" +
    "\070\143\071\142\001\002\000\056\004\uff91\005\uff91\006" +
    "\uff91\007\uff91\010\uff91\017\uff91\020\uff91\022\uff91\023\uff91" +
    "\024\uff91\026\uff91\027\uff91\031\uff91\033\uff91\034\uff91\035" +
    "\uff91\036\uff91\037\uff91\040\uff91\041\uff91\042\uff91\043\uff91" +
    "\001\002\000\006\005\233\031\247\001\002\000\056\004" +
    "\uff90\005\uff90\006\uff90\007\uff90\010\uff90\017\uff90\020\uff90" +
    "\022\uff90\023\uff90\024\uff90\026\uff90\027\uff90\031\uff90\033" +
    "\uff90\034\uff90\035\uff90\036\uff90\037\uff90\040\uff90\041\uff90" +
    "\042\uff90\043\uff90\001\002\000\006\005\233\033\251\001" +
    "\002\000\054\004\uff9f\005\uff9f\007\uff9f\010\uff9f\017\uff9f" +
    "\020\uff9f\022\uff9f\023\uff9f\024\uff9f\026\uff9f\027\uff9f\031" +
    "\uff9f\033\uff9f\034\uff9f\035\uff9f\036\uff9f\037\uff9f\040\uff9f" +
    "\041\uff9f\042\uff9f\043\uff9f\001\002\000\004\004\253\001" +
    "\002\000\030\030\uffba\033\uffba\044\uffba\046\uffba\051\uffba" +
    "\052\uffba\054\uffba\055\uffba\056\uffba\057\uffba\062\uffba\001" +
    "\002\000\006\030\256\034\255\001\002\000\032\011\140" +
    "\020\155\030\154\032\151\047\145\062\146\063\141\064" +
    "\150\065\152\067\144\070\143\071\142\001\002\000\034" +
    "\011\140\020\155\030\154\031\257\032\151\047\145\062" +
    "\146\063\141\064\150\065\152\067\144\070\143\071\142" +
    "\001\002\000\054\004\uff93\005\uff93\007\uff93\010\uff93\017" +
    "\uff93\020\uff93\022\uff93\023\uff93\024\uff93\026\uff93\027\uff93" +
    "\031\uff93\033\uff93\034\uff93\035\uff93\036\uff93\037\uff93\040" +
    "\uff93\041\uff93\042\uff93\043\uff93\001\002\000\006\005\233" +
    "\031\261\001\002\000\054\004\uff92\005\uff92\007\uff92\010" +
    "\uff92\017\uff92\020\uff92\022\uff92\023\uff92\024\uff92\026\uff92" +
    "\027\uff92\031\uff92\033\uff92\034\uff92\035\uff92\036\uff92\037" +
    "\uff92\040\uff92\041\uff92\042\uff92\043\uff92\001\002\000\042" +
    "\010\172\017\161\020\174\022\171\023\164\024\165\026" +
    "\157\027\160\034\163\035\263\036\167\037\175\040\170" +
    "\041\173\042\162\043\166\001\002\000\054\004\uff97\005" +
    "\uff97\007\uff97\010\uff97\017\uff97\020\uff97\022\uff97\023\uff97" +
    "\024\uff97\026\uff97\027\uff97\031\uff97\033\uff97\034\uff97\035" +
    "\uff97\036\uff97\037\uff97\040\uff97\041\uff97\042\uff97\043\uff97" +
    "\001\002\000\054\004\uffa4\005\uffa4\007\uffa4\010\uffa4\017" +
    "\uffa4\020\uffa4\022\uffa4\023\uffa4\024\uffa4\026\uffa4\027\uffa4" +
    "\031\uffa4\033\uffa4\034\163\035\uffa4\036\uffa4\037\uffa4\040" +
    "\uffa4\041\uffa4\042\uffa4\043\uffa4\001\002\000\032\011\140" +
    "\020\155\030\154\032\151\047\145\062\146\063\141\064" +
    "\150\065\152\067\144\070\143\071\142\001\002\000\042" +
    "\010\172\017\161\020\174\022\171\023\164\024\165\026" +
    "\157\027\160\031\267\034\163\036\167\037\175\040\170" +
    "\041\173\042\162\043\166\001\002\000\004\032\120\001" +
    "\002\000\030\030\uffbc\033\uffbc\044\uffbc\046\uffbc\051\uffbc" +
    "\052\uffbc\054\uffbc\055\uffbc\056\uffbc\057\uffbc\062\uffbc\001" +
    "\002\000\032\011\140\020\155\030\154\032\151\047\145" +
    "\062\146\063\141\064\150\065\152\067\144\070\143\071" +
    "\142\001\002\000\032\011\140\020\155\030\154\032\151" +
    "\047\145\062\146\063\141\064\150\065\152\067\144\070" +
    "\143\071\142\001\002\000\042\010\172\017\161\020\174" +
    "\022\171\023\164\024\165\026\157\027\160\034\163\035" +
    "\274\036\167\037\175\040\170\041\173\042\162\043\166" +
    "\001\002\000\010\012\uffb6\031\uffb6\034\uffb6\001\002\000" +
    "\042\004\276\010\172\017\161\020\174\022\171\023\164" +
    "\024\165\026\157\027\160\034\163\036\167\037\175\040" +
    "\170\041\173\042\162\043\166\001\002\000\030\030\uffc0" +
    "\033\uffc0\044\uffc0\046\uffc0\051\uffc0\052\uffc0\054\uffc0\055" +
    "\uffc0\056\uffc0\057\uffc0\062\uffc0\001\002\000\006\012\300" +
    "\034\115\001\002\000\032\011\140\020\155\030\154\032" +
    "\151\047\145\062\146\063\141\064\150\065\152\067\144" +
    "\070\143\071\142\001\002\000\042\004\302\010\172\017" +
    "\161\020\174\022\171\023\164\024\165\026\157\027\160" +
    "\034\163\036\167\037\175\040\170\041\173\042\162\043" +
    "\166\001\002\000\030\030\uffc2\033\uffc2\044\uffc2\046\uffc2" +
    "\051\uffc2\052\uffc2\054\uffc2\055\uffc2\056\uffc2\057\uffc2\062" +
    "\uffc2\001\002\000\030\030\uffbf\033\uffbf\044\uffbf\046\uffbf" +
    "\051\uffbf\052\uffbf\054\uffbf\055\uffbf\056\uffbf\057\uffbf\062" +
    "\uffbf\001\002\000\004\062\305\001\002\000\016\004\uff8f" +
    "\006\uff8f\012\uffb3\030\244\031\uffb3\034\uffb3\001\002\000" +
    "\004\062\307\001\002\000\016\004\uff8e\006\uff8e\012\uffb4" +
    "\030\227\031\uffb4\034\uffb4\001\002\000\032\011\140\020" +
    "\155\030\154\032\151\047\145\062\146\063\141\064\150" +
    "\065\152\067\144\070\143\071\142\001\002\000\042\010" +
    "\172\017\161\020\174\022\171\023\164\024\165\026\157" +
    "\027\160\031\312\034\163\036\167\037\175\040\170\041" +
    "\173\042\162\043\166\001\002\000\004\032\120\001\002" +
    "\000\032\030\uffbd\033\uffbd\044\uffbd\045\314\046\uffbd\051" +
    "\uffbd\052\uffbd\054\uffbd\055\uffbd\056\uffbd\057\uffbd\062\uffbd" +
    "\001\002\000\004\032\120\001\002\000\030\030\uffbe\033" +
    "\uffbe\044\uffbe\046\uffbe\051\uffbe\052\uffbe\054\uffbe\055\uffbe" +
    "\056\uffbe\057\uffbe\062\uffbe\001\002\000\004\006\304\001" +
    "\002\000\010\006\306\031\uffb7\034\uffb7\001\002\000\006" +
    "\031\321\034\272\001\002\000\010\012\uffb5\031\uffb5\034" +
    "\uffb5\001\002\000\042\004\323\010\172\017\161\020\174" +
    "\022\171\023\164\024\165\026\157\027\160\034\163\036" +
    "\167\037\175\040\170\041\173\042\162\043\166\001\002" +
    "\000\030\030\uffbb\033\uffbb\044\uffbb\046\uffbb\051\uffbb\052" +
    "\uffbb\054\uffbb\055\uffbb\056\uffbb\057\uffbb\062\uffbb\001\002" +
    "\000\010\005\uffc6\031\uffc6\034\115\001\002\000\042\004" +
    "\326\010\172\017\161\020\174\022\171\023\164\024\165" +
    "\026\157\027\160\034\163\036\167\037\175\040\170\041" +
    "\173\042\162\043\166\001\002\000\010\033\uffe6\076\uffe6" +
    "\077\uffe6\001\002\000\004\062\330\001\002\000\004\030" +
    "\331\001\002\000\016\031\uffc8\054\073\055\066\056\075" +
    "\057\070\062\030\001\002\000\004\031\333\001\002\000" +
    "\004\004\334\001\002\000\010\033\uffe4\076\uffe4\077\uffe4" +
    "\001\002\000\016\031\uffc8\054\073\055\066\056\075\057" +
    "\070\062\030\001\002\000\004\031\337\001\002\000\004" +
    "\032\120\001\002\000\010\033\uffe8\076\uffe8\077\uffe8\001" +
    "\002\000\020\054\uffdc\055\uffdc\056\uffdc\057\uffdc\061\uffdc" +
    "\062\uffdc\102\uffdc\001\002\000\010\005\034\032\ufff5\074" +
    "\ufff5\001\002\000\006\032\344\072\345\001\002\000\020" +
    "\033\uffe2\054\uffe2\055\uffe2\056\uffe2\057\uffe2\061\uffe2\062" +
    "\uffe2\001\002\000\004\062\030\001\002\000\006\005\034" +
    "\032\347\001\002\000\020\033\uffe2\054\uffe2\055\uffe2\056" +
    "\uffe2\057\uffe2\061\uffe2\062\uffe2\001\002\000\020\033\353" +
    "\054\073\055\066\056\075\057\070\061\071\062\030\001" +
    "\002\000\020\033\uffe3\054\uffe3\055\uffe3\056\uffe3\057\uffe3" +
    "\061\uffe3\062\uffe3\001\002\000\004\062\354\001\002\000" +
    "\014\002\ufffa\073\ufffa\075\ufffa\100\ufffa\102\ufffa\001\002" +
    "\000\004\030\355\001\002\000\016\031\uffc8\054\073\055" +
    "\066\056\075\057\070\062\030\001\002\000\004\031\357" +
    "\001\002\000\004\004\360\001\002\000\020\033\uffe1\054" +
    "\uffe1\055\uffe1\056\uffe1\057\uffe1\061\uffe1\062\uffe1\001\002" +
    "\000\020\033\362\054\073\055\066\056\075\057\070\061" +
    "\071\062\030\001\002\000\014\002\ufffb\073\ufffb\075\ufffb" +
    "\100\ufffb\102\ufffb\001\002\000\014\002\uffff\073\uffff\075" +
    "\uffff\100\uffff\102\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\361\000\016\002\013\003\005\020\003\021\010\022" +
    "\006\041\012\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\020\362\021\010\022\006\041\012\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\033\342\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\033\016\001\001\000\004\042\044" +
    "\001\001\000\002\001\001\000\006\034\021\035\023\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\030\025\031\026\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\027\032\031\031" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\031" +
    "\035\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\031\037\001\001\000\002\001\001\000\004\035\042\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\027\341" +
    "\031\031\001\001\000\004\043\045\001\001\000\002\001" +
    "\001\000\006\027\047\031\031\001\001\000\002\001\001" +
    "\000\004\024\051\001\001\000\006\025\053\026\052\001" +
    "\001\000\004\032\061\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\014\062\015\075\023\073" +
    "\031\063\040\071\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\014\062" +
    "\015\075\031\063\040\326\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\016\324\044\152\001\001\000\002\001\001" +
    "\000\014\011\104\012\103\014\102\015\075\031\063\001" +
    "\001\000\004\013\323\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\014\106\015\075\031\063\001\001\000" +
    "\004\013\107\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\013\112\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\004\120" +
    "\001\001\000\004\005\121\001\001\000\002\001\001\000" +
    "\020\006\122\007\124\014\131\015\075\017\132\031\063" +
    "\044\130\001\001\000\002\001\001\000\006\016\321\044" +
    "\152\001\001\000\002\001\001\000\006\017\317\044\315" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\013\276\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\016" +
    "\146\044\152\001\001\000\006\016\263\044\152\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\014\253\015\075\031\063\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\010\247\016\230\044\152\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\016\220\044\152\001\001\000" +
    "\006\016\155\044\152\001\001\000\002\001\001\000\006" +
    "\016\216\044\152\001\001\000\006\016\215\044\152\001" +
    "\001\000\006\016\214\044\152\001\001\000\006\016\213" +
    "\044\152\001\001\000\006\016\211\044\152\001\001\000" +
    "\006\016\210\044\152\001\001\000\006\016\207\044\152" +
    "\001\001\000\006\016\206\044\152\001\001\000\006\016" +
    "\205\044\152\001\001\000\006\016\204\044\152\001\001" +
    "\000\006\016\203\044\152\001\001\000\006\016\200\044" +
    "\152\001\001\000\006\016\177\044\152\001\001\000\006" +
    "\016\176\044\152\001\001\000\006\016\175\044\152\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\016\202\044\152\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\016\240\044\152\001\001\000\010\010\236\016\230\044" +
    "\152\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\010\231\016\230\044\152\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\016\234\044\152" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\010\245\016" +
    "\230\044\152\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\016\261\044\152\001\001\000\010\010\257\016\230\044" +
    "\152\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\016\265\044\152\001\001\000\002\001\001" +
    "\000\004\004\267\001\001\000\002\001\001\000\006\016" +
    "\274\044\152\001\001\000\006\016\272\044\152\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\016\300\044\152" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\016\310\044\152\001\001\000" +
    "\002\001\001\000\004\004\312\001\001\000\002\001\001" +
    "\000\004\004\314\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\011\104\012\331\014\102\015\075\031" +
    "\063\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\011\104\012\335\014\102\015\075\031" +
    "\063\001\001\000\002\001\001\000\004\004\337\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\036\360\001\001\000\006\027\345" +
    "\031\031\001\001\000\002\001\001\000\004\036\347\001" +
    "\001\000\014\014\062\015\075\031\063\037\350\040\351" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\011\104\012\355\014\102" +
    "\015\075\031\063\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\014\062\015\075\031\063" +
    "\037\350\040\351\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
//@@CUPDBG1

    ComplexSymbolFactory f = new ComplexSymbolFactory();
    symbolFactory = f;
    File file = new File(this.name);
    FileInputStream fis = null;
    try {
        fis = new FileInputStream(file);
    } catch (IOException e) {
        e.printStackTrace();
    }
    lexer = new Lexer(f, fis);

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
//@@CUPDBG2
 return lexer.next_token(); 
    }

//@@CUPDBG0


    protected Lexer lexer;

    public String name;

    public Program program;

    public boolean resolve = false;
    public boolean checkType = false;

    public double
        resolveTimeMs,
        checkTypeTimeMs,
        allocateMemoryTimeMs,
        getCodeTimeMs;

    public Fragment fragment;

    public Parser(String _name) {
        this();
        this.name = _name;
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Driver ::= Program 
            {
              Program RESULT =null;
		Location programxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location programxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Program program = (Program)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG3

		SymbolTable tds = new SymbolTable();

		if (program.resolve(tds)) {
				System.out.println("Resolve and collect succeeded.");
				if(program.checkType()){
					System.out.println("Check Type succeeded.");
					program.allocateMemory(Register.SB, 0);
					System.out.println(program.getCode(new TAMFactoryImpl()));
				}else {
					System.out.println("Check Type succeeded.");
				}
		} else {
				System.out.println("Resolve and collect failed." + tds);
		}
        this.parser.program = program;
        RESULT = program;


    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Driver",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Driver EOF 
            {
              Object RESULT =null;
		Location start_valxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location start_valxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Program start_val = (Program)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Program ::= Program ProgramDeclaration 
            {
              Program RESULT =null;
		Location programxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location programxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Program program = (Program)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location declxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location declxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ProgramDeclaration decl = (ProgramDeclaration)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG4

			program.add(decl);
			RESULT = program;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Program",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Program ::= ProgramDeclaration 
            {
              Program RESULT =null;
		Location declxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location declxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ProgramDeclaration decl = (ProgramDeclaration)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG5

			RESULT = new Program(decl);
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Program",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // ProgramDeclaration ::= InterfaceDeclaration 
            {
              ProgramDeclaration RESULT =null;
		Location declxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location declxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		InterfaceDeclaration decl = (InterfaceDeclaration)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG6
 RESULT = decl; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ProgramDeclaration",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // ProgramDeclaration ::= ClassDeclaration 
            {
              ProgramDeclaration RESULT =null;
		Location declxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location declxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		ClassDeclaration decl = (ClassDeclaration)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG7
 RESULT = decl; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ProgramDeclaration",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // InterfaceDeclaration ::= UL_Interface ClassName UL_Accolade_Ouvrante InnerInterfaceDefinitions UL_Accolade_Fermante 
            {
              InterfaceDeclaration RESULT =null;
		Location classNamexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location classNamexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		ClassName className = (ClassName)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location definitionsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location definitionsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		List<Signature> definitions = (List<Signature>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG8

            RESULT = new InterfaceDeclaration(className, definitions);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("InterfaceDeclaration",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // InterfaceDeclaration ::= UL_Interface ClassName UL_Extends InstanceTypes UL_Accolade_Ouvrante InnerInterfaceDefinitions UL_Accolade_Fermante 
            {
              InterfaceDeclaration RESULT =null;
		Location classNamexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xleft;
		Location classNamexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xright;
		ClassName className = (ClassName)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		Location InstanceTypesxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location InstanceTypesxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		List<InstanceType> InstanceTypes = (List<InstanceType>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location definitionsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location definitionsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		List<Signature> definitions = (List<Signature>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG9

			RESULT = new InterfaceDeclaration(className, InstanceTypes, definitions);
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("InterfaceDeclaration",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // ClassDeclaration ::= ClassModifier UL_Class ClassName ClassExtension ClassImplementation UL_Accolade_Ouvrante InnerClassDefinitions UL_Accolade_Fermante 
            {
              ClassDeclaration RESULT =null;
		Location modifierxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).xleft;
		Location modifierxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).xright;
		ClassModifier modifier = (ClassModifier)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		Location classNamexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xleft;
		Location classNamexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xright;
		ClassName className = (ClassName)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		Location classExtensionxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location classExtensionxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		List<InstanceType> classExtension = (List<InstanceType>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location classImplementationxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location classImplementationxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		List<InstanceType> classImplementation = (List<InstanceType>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location definitionsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location definitionsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		List<Definition> definitions = (List<Definition>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG10
 RESULT = new ClassDeclaration(modifier, className, classExtension, classImplementation, definitions); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ClassDeclaration",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // ClassModifier ::= UL_Final 
            {
              ClassModifier RESULT =null;
		//@@CUPDBG11
 RESULT = ClassModifier.FINAL; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ClassModifier",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // ClassModifier ::= UL_Abstract 
            {
              ClassModifier RESULT =null;
		//@@CUPDBG12
 RESULT = ClassModifier.ABSTRACT; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ClassModifier",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // ClassModifier ::= 
            {
              ClassModifier RESULT =null;
		//@@CUPDBG13
 RESULT = null; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ClassModifier",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // ClassExtension ::= UL_Extends InstanceTypes 
            {
              List<InstanceType> RESULT =null;
		Location extxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location extxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		List<InstanceType> ext = (List<InstanceType>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG14

			RESULT = ext;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ClassExtension",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // ClassExtension ::= 
            {
              List<InstanceType> RESULT =null;
		//@@CUPDBG15

			RESULT = new LinkedList<InstanceType>();
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ClassExtension",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // ClassImplementation ::= UL_Implements InstanceTypes 
            {
              List<InstanceType> RESULT =null;
		Location implxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location implxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		List<InstanceType> impl = (List<InstanceType>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG16

			RESULT = impl;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ClassImplementation",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // ClassImplementation ::= 
            {
              List<InstanceType> RESULT =null;
		//@@CUPDBG17

			RESULT = new LinkedList<InstanceType>();
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ClassImplementation",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // ClassName ::= UL_Identificateur UL_Inferieur GenericTypes UL_Superieur 
            {
              ClassName RESULT =null;
		Location identxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location identxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		String ident = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location genericTypesxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location genericTypesxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		List<GenericType> genericTypes = (List<GenericType>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG18
 RESULT = new ClassName(ident, genericTypes); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ClassName",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // ClassName ::= UL_Identificateur 
            {
              ClassName RESULT =null;
		Location identxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location identxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String ident = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG19
 RESULT = new ClassName(ident); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ClassName",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // GenericTypes ::= GenericTypes UL_Virgule GenericType 
            {
              List<GenericType> RESULT =null;
		Location genericTypesxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location genericTypesxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		List<GenericType> genericTypes = (List<GenericType>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location genericTypexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location genericTypexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		GenericType genericType = (GenericType)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG20

            genericTypes.add(genericType);
            RESULT = genericTypes;
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("GenericTypes",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // GenericTypes ::= GenericType 
            {
              List<GenericType> RESULT =null;
		Location genericTypexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location genericTypexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		GenericType genericType = (GenericType)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG21

            RESULT = new LinkedList<GenericType>();
            RESULT.add(genericType);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("GenericTypes",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // GenericType ::= UL_Identificateur 
            {
              GenericType RESULT =null;
		Location identxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location identxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String ident = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG22
 RESULT = new GenericType(ident); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("GenericType",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // GenericType ::= UL_Identificateur UL_Extends InstanceTypesWithEsperluette 
            {
              GenericType RESULT =null;
		Location identxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location identxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		String ident = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location InstanceTypesxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location InstanceTypesxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		List<InstanceType> InstanceTypes = (List<InstanceType>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG23
 RESULT = new GenericType(ident, InstanceTypes); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("GenericType",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // InnerClassDefinitions ::= InnerClassDefinitions InnerClassDefinition 
            {
              List<Definition> RESULT =null;
		Location defsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location defsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		List<Definition> defs = (List<Definition>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location defxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location defxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Definition def = (Definition)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG24
 defs.add(def); RESULT = defs; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("InnerClassDefinitions",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // InnerClassDefinitions ::= 
            {
              List<Definition> RESULT =null;
		//@@CUPDBG25
 RESULT = new LinkedList<>(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("InnerClassDefinitions",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // InnerClassDefinition ::= AccessModifier DefinitionModifier InnerClassDefinitionWithoutModifier 
            {
              Definition RESULT =null;
		Location accessModifierxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location accessModifierxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		AccessModifier accessModifier = (AccessModifier)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location definitionModifierxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location definitionModifierxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		DefinitionModifier definitionModifier = (DefinitionModifier)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location definitionxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location definitionxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Definition definition = (Definition)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG26

            definition.setAccessModifier(accessModifier);
            definition.setDefinitionModifier(definitionModifier);
            RESULT = definition;
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("InnerClassDefinition",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // InnerClassDefinitionWithoutModifier ::= UL_Identificateur UL_Parenthese_Ouvrante ParametersOrNot UL_Parenthese_Fermante Bloc 
            {
              Definition RESULT =null;
		Location identxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location identxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		String ident = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location parametersxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location parametersxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		List<ParameterDeclaration> parameters = (List<ParameterDeclaration>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location bodyxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location bodyxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Block body = (Block)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG27
 RESULT = new Constructor(ident, parameters, body); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("InnerClassDefinitionWithoutModifier",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // InnerClassDefinitionWithoutModifier ::= NullableType UL_Identificateur UL_Point_Virgule 
            {
              Definition RESULT =null;
		Location typexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location typexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location identxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location identxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		String ident = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG28
 RESULT = new AttributeDefinition(type, ident); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("InnerClassDefinitionWithoutModifier",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // InnerClassDefinitionWithoutModifier ::= NullableType UL_Identificateur UL_Egal Expression UL_Point_Virgule 
            {
              Definition RESULT =null;
		Location typexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location typexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location identxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location identxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		String ident = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location valuexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location valuexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Expression value = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG29
 RESULT = new AttributeDefinition(type, ident, value); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("InnerClassDefinitionWithoutModifier",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // InnerClassDefinitionWithoutModifier ::= NullableType UL_Identificateur UL_Parenthese_Ouvrante ParametersOrNot UL_Parenthese_Fermante Bloc 
            {
              Definition RESULT =null;
		Location typexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xleft;
		Location typexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xright;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		Location identxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location identxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		String ident = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location parametersxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location parametersxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		List<ParameterDeclaration> parameters = (List<ParameterDeclaration>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location bodyxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location bodyxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Block body = (Block)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG30
 RESULT = new MethodDefinition(new Signature(type, ident, parameters), body); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("InnerClassDefinitionWithoutModifier",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // InnerClassDefinitionWithoutModifier ::= UL_Abstract NullableType UL_Identificateur UL_Parenthese_Ouvrante ParametersOrNot UL_Parenthese_Fermante UL_Point_Virgule 
            {
              Definition RESULT =null;
		Location typexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xleft;
		Location typexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xright;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		Location identxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location identxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		String ident = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location parametersxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location parametersxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		List<ParameterDeclaration> parameters = (List<ParameterDeclaration>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		//@@CUPDBG31
 RESULT = new MethodDefinition(new Signature(type, ident, parameters), null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("InnerClassDefinitionWithoutModifier",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // InnerInterfaceDefinitions ::= InnerInterfaceDefinitions InnerInterfaceDefinition 
            {
              List<Signature> RESULT =null;
		Location defsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location defsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		List<Signature> defs = (List<Signature>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location defxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location defxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Signature def = (Signature)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG32
 defs.add(def); RESULT = defs; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("InnerInterfaceDefinitions",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // InnerInterfaceDefinitions ::= 
            {
              List<Signature> RESULT =null;
		//@@CUPDBG33
 RESULT = new LinkedList<>(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("InnerInterfaceDefinitions",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // InnerInterfaceDefinition ::= NullableType UL_Identificateur UL_Parenthese_Ouvrante ParametersOrNot UL_Parenthese_Fermante UL_Point_Virgule 
            {
              Signature RESULT =null;
		Location typexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xleft;
		Location typexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xright;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		Location identxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location identxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		String ident = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location parametersxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location parametersxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		List<ParameterDeclaration> parameters = (List<ParameterDeclaration>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		//@@CUPDBG34
 RESULT = new Signature(type, ident, parameters); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("InnerInterfaceDefinition",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // AccessModifier ::= UL_Public 
            {
              AccessModifier RESULT =null;
		//@@CUPDBG35
 RESULT = AccessModifier.PUBLIC; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AccessModifier",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // AccessModifier ::= UL_Private 
            {
              AccessModifier RESULT =null;
		//@@CUPDBG36
 RESULT = AccessModifier.PRIVATE; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AccessModifier",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // DefinitionModifier ::= UL_Static 
            {
              DefinitionModifier RESULT =null;
		//@@CUPDBG37
 RESULT = DefinitionModifier.STATIC; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DefinitionModifier",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // DefinitionModifier ::= UL_Final 
            {
              DefinitionModifier RESULT =null;
		//@@CUPDBG38
 RESULT = DefinitionModifier.FINAL; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DefinitionModifier",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // DefinitionModifier ::= UL_Static UL_Final 
            {
              DefinitionModifier RESULT =null;
		//@@CUPDBG39
 RESULT = DefinitionModifier.STATIC_FINAL; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DefinitionModifier",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // DefinitionModifier ::= 
            {
              DefinitionModifier RESULT =null;
		//@@CUPDBG40
 RESULT = null; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DefinitionModifier",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // InstanceTypes ::= InstanceType 
            {
              List<InstanceType> RESULT =null;
		Location InstanceTypexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location InstanceTypexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		InstanceType InstanceType = (InstanceType)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG41

			List<InstanceType> InstanceTypes = new LinkedList<>();
			InstanceTypes.add(InstanceType);
			RESULT = InstanceTypes;
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("InstanceTypes",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // InstanceTypes ::= InstanceTypes UL_Virgule InstanceType 
            {
              List<InstanceType> RESULT =null;
		Location InstanceTypesxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location InstanceTypesxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		List<InstanceType> InstanceTypes = (List<InstanceType>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location InstanceTypexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location InstanceTypexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		InstanceType InstanceType = (InstanceType)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG42

			InstanceTypes.add(InstanceType);
			RESULT = InstanceTypes;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("InstanceTypes",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // InstanceTypesWithEsperluette ::= InstanceType 
            {
              List<InstanceType> RESULT =null;
		Location InstanceTypexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location InstanceTypexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		InstanceType InstanceType = (InstanceType)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG43

			List<InstanceType> InstanceTypes = new LinkedList<>();
			InstanceTypes.add(InstanceType);
			RESULT = InstanceTypes;
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("InstanceTypesWithEsperluette",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // InstanceTypesWithEsperluette ::= InstanceTypesWithEsperluette UL_Esperluette InstanceType 
            {
              List<InstanceType> RESULT =null;
		Location InstanceTypesxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location InstanceTypesxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		List<InstanceType> InstanceTypes = (List<InstanceType>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location InstanceTypexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location InstanceTypexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		InstanceType InstanceType = (InstanceType)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG44

			InstanceTypes.add(InstanceType);
			RESULT = InstanceTypes;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("InstanceTypesWithEsperluette",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // InstanceType ::= UL_Identificateur 
            {
              InstanceType RESULT =null;
		Location identxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location identxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String ident = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG45
 RESULT = new InstanceType(ident, new LinkedList<>()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("InstanceType",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // InstanceType ::= UL_Identificateur UL_Inferieur InstanceTypes UL_Superieur 
            {
              InstanceType RESULT =null;
		Location identxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location identxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		String ident = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location instanceTypesxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location instanceTypesxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		List<InstanceType> instanceTypes = (List<InstanceType>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG46
 RESULT = new InstanceType(ident, instanceTypes); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("InstanceType",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // NullableType ::= UL_Type_Vide 
            {
              Type RESULT =null;
		//@@CUPDBG47
 RESULT = AtomicType.VoidType; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NullableType",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // NullableType ::= Type 
            {
              Type RESULT =null;
		Location typexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location typexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG48
 RESULT = type; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NullableType",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Bloc ::= UL_Accolade_Ouvrante Instructions UL_Accolade_Fermante 
            {
              Block RESULT =null;
		Location instructionsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location instructionsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		List<Instruction> instructions = (List<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG49

				RESULT = new Block( instructions );
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Bloc",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Atomique ::= UL_Type_Booleen 
            {
              Type RESULT =null;
		//@@CUPDBG50

				RESULT = AtomicType.BooleanType;
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Atomique",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Atomique ::= UL_Type_Caractere 
            {
              Type RESULT =null;
		//@@CUPDBG51

				RESULT = AtomicType.CharacterType;
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Atomique",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Atomique ::= UL_Type_Chaine 
            {
              Type RESULT =null;
		//@@CUPDBG52

				RESULT = AtomicType.StringType;
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Atomique",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Atomique ::= UL_Type_Entier 
            {
              Type RESULT =null;
		//@@CUPDBG53

				RESULT = AtomicType.IntegerType;
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Atomique",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Type ::= Atomique 
            {
              Type RESULT =null;
		Location atomiquexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location atomiquexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Type atomique = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG54

				RESULT = atomique;
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Type ::= InstanceType 
            {
              Type RESULT =null;
		Location InstanceTypexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location InstanceTypexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		InstanceType InstanceType = (InstanceType)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG55

				RESULT = InstanceType;
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Instructions ::= Instructions Instruction 
            {
              List<Instruction> RESULT =null;
		Location instructionsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location instructionsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		List<Instruction> instructions = (List<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location instructionxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location instructionxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Instruction instruction = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG56

					instructions.add( instruction );
					RESULT = instructions;
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Instructions",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Instructions ::= 
            {
              List<Instruction> RESULT =null;
		//@@CUPDBG57
 RESULT = new LinkedList<Instruction>(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Instructions",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // ParametersOrNot ::= Parameters 
            {
              List<ParameterDeclaration> RESULT =null;
		Location parametersxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location parametersxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		List<ParameterDeclaration> parameters = (List<ParameterDeclaration>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG58
 RESULT = parameters; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ParametersOrNot",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // ParametersOrNot ::= 
            {
              List<ParameterDeclaration> RESULT =null;
		//@@CUPDBG59
 RESULT = new LinkedList<ParameterDeclaration>(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ParametersOrNot",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Parameters ::= Parameters UL_Virgule Type Identifiant 
            {
              List<ParameterDeclaration> RESULT =null;
		Location parametersxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location parametersxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		List<ParameterDeclaration> parameters = (List<ParameterDeclaration>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location typexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location typexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location identifiantxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location identifiantxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Pair<String,PartialType> identifiant = (Pair<String,PartialType>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG60

					Type _type = identifiant.getRight();
					if (_type == null) {
						_type = type;
					} else {
						_type = ((PartialType)_type).complete( type );
 					}
					parameters.add( new ParameterDeclaration( identifiant.getLeft(), _type) );
					RESULT = parameters;
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Parameters",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Parameters ::= Type Identifiant 
            {
              List<ParameterDeclaration> RESULT =null;
		Location typexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location typexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location identifiantxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location identifiantxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Pair<String,PartialType> identifiant = (Pair<String,PartialType>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG61

					List<ParameterDeclaration> _parameters = new LinkedList<ParameterDeclaration>();
					Type _type = identifiant.getRight();
					if (_type == null) {
						_type = type;
					} else {
						_type = ((PartialType)_type).complete( type );
 					}
					_parameters.add( new ParameterDeclaration( identifiant.getLeft(), _type) );
					RESULT = _parameters;
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Parameters",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Identifiant ::= UL_Identificateur 
            {
              Pair<String,PartialType> RESULT =null;
		Location nomxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location nomxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String nom = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG62

					RESULT = new Pair<String, PartialType>(nom, null);
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Identifiant",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Identifiant ::= Identifiant UL_Crochet_Ouvrant UL_Crochet_Fermant 
            {
              Pair<String,PartialType> RESULT =null;
		Location identifiantxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location identifiantxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Pair<String,PartialType> identifiant = (Pair<String,PartialType>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		//@@CUPDBG63

					if (identifiant.getRight() == null) {
						identifiant.setRight( new PartialArrayType() );
					} else {
						identifiant.getRight().enrich(new PartialArrayType());
					}
					RESULT = identifiant;
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Identifiant",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Identifiant ::= UL_Parenthese_Ouvrante Identifiant UL_Parenthese_Fermante 
            {
              Pair<String,PartialType> RESULT =null;
		Location identifiantxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location identifiantxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Pair<String,PartialType> identifiant = (Pair<String,PartialType>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG64

					RESULT = identifiant;
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Identifiant",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Declaration ::= Type Identifiant UL_Egal Expression UL_Point_Virgule 
            {
              Instruction RESULT =null;
		Location typexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location typexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location identifiantxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location identifiantxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		Pair<String,PartialType> identifiant = (Pair<String,PartialType>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location valeurxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location valeurxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Expression valeur = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG65

					Type _type = identifiant.getRight();
					if (_type == null) {
						_type = type;
					} else {
						_type = ((PartialType)_type).complete( type );
 					}
					RESULT = new VariableDeclaration( identifiant.getLeft(), _type, valeur);
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Declaration",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Instruction ::= Declaration 
            {
              Instruction RESULT =null;
		Location declarationxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location declarationxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Instruction declaration = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG66

					RESULT = declaration;
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Instruction",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Instruction ::= Affectable UL_Egal Expression UL_Point_Virgule 
            {
              Instruction RESULT =null;
		Location affectablexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location affectablexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		AssignableExpression affectable = (AssignableExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location expressionxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location expressionxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Expression expression = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG67

					RESULT = new Assignment( affectable, expression);
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Instruction",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Instruction ::= DefinitionAccess UL_Point_Virgule 
            {
              Instruction RESULT =null;
		Location methodAccessxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location methodAccessxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		DefinitionAccess methodAccess = (DefinitionAccess)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG68

					RESULT = methodAccess;
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Instruction",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Instruction ::= UL_Si UL_Parenthese_Ouvrante Expression UL_Parenthese_Fermante Bloc UL_Sinon Bloc 
            {
              Instruction RESULT =null;
		Location conditionxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location conditionxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		Expression condition = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location alorsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location alorsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Block alors = (Block)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location sinonxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location sinonxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Block sinon = (Block)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG69

					RESULT = new Conditional( condition, alors, sinon);
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Instruction",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Instruction ::= UL_Si UL_Parenthese_Ouvrante Expression UL_Parenthese_Fermante Bloc 
            {
              Instruction RESULT =null;
		Location conditionxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location conditionxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Expression condition = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location alorsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location alorsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Block alors = (Block)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG70

					RESULT = new Conditional( condition, alors);
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Instruction",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Instruction ::= UL_Tant_Que UL_Parenthese_Ouvrante Expression UL_Parenthese_Fermante Bloc 
            {
              Instruction RESULT =null;
		Location conditionxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location conditionxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Expression condition = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location corpsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location corpsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Block corps = (Block)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG71

					RESULT = new Iteration( condition, corps);
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Instruction",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Instruction ::= UL_Retour Expression UL_Point_Virgule 
            {
              Instruction RESULT =null;
		Location expressionxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location expressionxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Expression expression = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG72

					RESULT = new Return( expression);
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Instruction",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Instruction ::= UL_Log UL_Parenthese_Ouvrante Expression UL_Parenthese_Fermante UL_Point_Virgule 
            {
              Instruction RESULT =null;
		Location expressionxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location expressionxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Expression expression = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		//@@CUPDBG73

                    RESULT = new LogInstruction(expression);
		        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Instruction",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Expressions ::= Expressions UL_Virgule Expression 
            {
              List<Expression> RESULT =null;
		Location expressionsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location expressionsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		List<Expression> expressions = (List<Expression>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location expressionxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location expressionxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expression expression = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG74

					expressions.add( expression );
					RESULT = expressions;
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expressions",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Expressions ::= Expression 
            {
              List<Expression> RESULT =null;
		Location expressionxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location expressionxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expression expression = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG75

					List<Expression> _expressions = new LinkedList<Expression>();
					_expressions.add( expression );
					RESULT = _expressions;
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expressions",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Affectable ::= UL_Identificateur 
            {
              AssignableExpression RESULT =null;
		Location namexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location namexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG76

					RESULT = new VariableAssignment(name);
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Affectable",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // Affectable ::= Affectable UL_Crochet_Ouvrant Expression UL_Crochet_Fermant 
            {
              AssignableExpression RESULT =null;
		Location tableauxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location tableauxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		AssignableExpression tableau = (AssignableExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location indicexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location indicexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Expression indice = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG77

					RESULT = new ArrayAssignment(tableau, indice);
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Affectable",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // Affectable ::= UL_Parenthese_Ouvrante Affectable UL_Parenthese_Fermante 
            {
              AssignableExpression RESULT =null;
		Location affectablexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location affectablexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		AssignableExpression affectable = (AssignableExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG78

					RESULT = affectable;
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Affectable",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // Affectable ::= UL_Identificateur UL_Point UL_Identificateur 
            {
              AssignableExpression RESULT =null;
		Location targetxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location targetxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		String target = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location attributexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location attributexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String attribute = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG79

			        RESULT = new AttributeAssignment(target, attribute);
			    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Affectable",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // Affectable ::= DefinitionAccess UL_Point UL_Identificateur 
            {
              AssignableExpression RESULT =null;
		Location objectxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location objectxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		DefinitionAccess object = (DefinitionAccess)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location attributexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location attributexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String attribute = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG80

				    RESULT = new AttributeAssignment(object, attribute);
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Affectable",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // Expression ::= Expression UL_Double_Egal Expression 
            {
              Expression RESULT =null;
		Location gauchexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location gauchexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Expression gauche = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location droitexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location droitexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expression droite = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG81

					RESULT = new BinaryExpression( gauche, BinaryOperator.Equals, droite);
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // Expression ::= Expression UL_Exclamation_Egal Expression 
            {
              Expression RESULT =null;
		Location gauchexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location gauchexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Expression gauche = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location droitexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location droitexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expression droite = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG82

					RESULT = new BinaryExpression( gauche, BinaryOperator.Different, droite);
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // Expression ::= Expression UL_Inferieur Expression 
            {
              Expression RESULT =null;
		Location gauchexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location gauchexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Expression gauche = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location droitexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location droitexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expression droite = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG83

					RESULT = new BinaryExpression( gauche, BinaryOperator.Lesser, droite);
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // Expression ::= Expression UL_Superieur Expression 
            {
              Expression RESULT =null;
		Location gauchexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location gauchexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Expression gauche = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location droitexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location droitexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expression droite = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG84

					RESULT = new BinaryExpression( gauche, BinaryOperator.Greater, droite);
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // Expression ::= Expression UL_Inferieur_Egal Expression 
            {
              Expression RESULT =null;
		Location gauchexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location gauchexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Expression gauche = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location droitexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location droitexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expression droite = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG85

					RESULT = new BinaryExpression( gauche, BinaryOperator.LesserOrEqual, droite);
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // Expression ::= Expression UL_Superieur_Egal Expression 
            {
              Expression RESULT =null;
		Location gauchexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location gauchexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Expression gauche = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location droitexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location droitexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expression droite = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG86

					RESULT = new BinaryExpression( gauche, BinaryOperator.GreaterOrEqual, droite);
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // Expression ::= Expression UL_Double_Barre Expression 
            {
              Expression RESULT =null;
		Location gauchexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location gauchexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Expression gauche = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location droitexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location droitexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expression droite = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG87

					RESULT = new BinaryExpression( gauche, BinaryOperator.Or, droite);
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // Expression ::= Expression UL_Double_Esperluette Expression 
            {
              Expression RESULT =null;
		Location gauchexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location gauchexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Expression gauche = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location droitexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location droitexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expression droite = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG88

					RESULT = new BinaryExpression( gauche, BinaryOperator.And, droite);
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // Expression ::= Expression UL_Plus Expression 
            {
              Expression RESULT =null;
		Location gauchexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location gauchexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Expression gauche = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location droitexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location droitexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expression droite = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG89

					RESULT = new BinaryExpression( gauche, BinaryOperator.Add, droite);
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // Expression ::= Expression UL_Moins Expression 
            {
              Expression RESULT =null;
		Location gauchexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location gauchexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Expression gauche = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location droitexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location droitexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expression droite = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG90

					RESULT = new BinaryExpression( gauche, BinaryOperator.Substract, droite);
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // Expression ::= Expression UL_Asterisque Expression 
            {
              Expression RESULT =null;
		Location gauchexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location gauchexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Expression gauche = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location droitexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location droitexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expression droite = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG91

					RESULT = new BinaryExpression( gauche, BinaryOperator.Multiply, droite);
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // Expression ::= Expression UL_Oblique Expression 
            {
              Expression RESULT =null;
		Location gauchexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location gauchexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Expression gauche = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location droitexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location droitexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expression droite = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG92

					RESULT = new BinaryExpression( gauche, BinaryOperator.Divide, droite);
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // Expression ::= Expression UL_Pour_Cent Expression 
            {
              Expression RESULT =null;
		Location gauchexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location gauchexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Expression gauche = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location droitexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location droitexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expression droite = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG93

					RESULT = new BinaryExpression( gauche, BinaryOperator.Modulo, droite);
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // Expression ::= UL_Moins Expression 
            {
              Expression RESULT =null;
		Location expressionxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location expressionxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expression expression = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG94

					RESULT = new UnaryExpression( UnaryOperator.Opposite, expression);
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // Expression ::= UL_Point_Exclamation Expression 
            {
              Expression RESULT =null;
		Location expressionxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location expressionxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expression expression = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG95

					RESULT = new UnaryExpression( UnaryOperator.Negate, expression);
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // Expression ::= Expression UL_Crochet_Ouvrant Expression UL_Crochet_Fermant 
            {
              Expression RESULT =null;
		Location expressionxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location expressionxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		Expression expression = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location indicexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location indicexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Expression indice = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG96

					RESULT = new ArrayAccess( expression, indice );
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // Expression ::= Expression UL_Point_Interrogation Expression UL_Deux_Points Expression 
            {
              Expression RESULT =null;
		Location conditionxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location conditionxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		Expression condition = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location alorsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location alorsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Expression alors = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location sinonxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location sinonxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expression sinon = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG97

					RESULT = new ConditionalExpression( condition, alors, sinon );
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // Expression ::= UL_Parenthese_Ouvrante Expression UL_Parenthese_Fermante 
            {
              Expression RESULT =null;
		Location expressionxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location expressionxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Expression expression = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG98

					RESULT = expression;
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // Expression ::= UL_Parenthese_Ouvrante UL_Identificateur UL_Parenthese_Fermante Expression 
            {
              Expression RESULT =null;
		Location typexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location typexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		String type = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location expressionxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location expressionxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expression expression = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG99

					RESULT = new TypeCast( expression, type );
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // Expression ::= UL_Accolade_Ouvrante Expressions UL_Accolade_Fermante 
            {
              Expression RESULT =null;
		Location expressionsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location expressionsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		List<Expression> expressions = (List<Expression>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG100

					RESULT = new Sequence( expressions );
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // Expression ::= UL_Identificateur 
            {
              Expression RESULT =null;
		Location nomxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location nomxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String nom = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG101

					RESULT = new IdentifierAccess(nom);
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // Expression ::= UL_Nombre_Entier 
            {
              Expression RESULT =null;
		Location entierxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location entierxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String entier = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG102

					RESULT = new IntegerValue( entier );
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // Expression ::= UL_Vrai 
            {
              Expression RESULT =null;
		//@@CUPDBG103

					RESULT = BooleanValue.True;
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // Expression ::= UL_Faux 
            {
              Expression RESULT =null;
		//@@CUPDBG104

					RESULT = BooleanValue.False;
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // Expression ::= UL_Nul 
            {
              Expression RESULT =null;
		//@@CUPDBG105

					RESULT = NullValue.Null;
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // Expression ::= UL_Caractere 
            {
              Expression RESULT =null;
		Location caracterexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location caracterexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String caractere = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG106

					RESULT = new CharacterValue( caractere );
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // Expression ::= UL_Chaine 
            {
              Expression RESULT =null;
		Location chainexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location chainexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String chaine = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG107

					RESULT = new StringValue( chaine );
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // Expression ::= UL_Nouveau Type UL_Crochet_Ouvrant Expression UL_Crochet_Fermant 
            {
              Expression RESULT =null;
		Location typexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location typexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location taillexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location taillexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Expression taille = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG108

					RESULT = new ArrayAllocation(type, taille);
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // Expression ::= UL_Identificateur UL_Parenthese_Ouvrante UL_Parenthese_Fermante 
            {
              Expression RESULT =null;
		Location methodxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location methodxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		String method = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		//@@CUPDBG109

			        RESULT = new MethodAccess("this", method, new LinkedList<>());
			    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // Expression ::= UL_Identificateur UL_Parenthese_Ouvrante Expressions UL_Parenthese_Fermante 
            {
              Expression RESULT =null;
		Location methodxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location methodxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		String method = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location parametersxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location parametersxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		List<Expression> parameters = (List<Expression>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG110

			        RESULT = new MethodAccess("this", method, parameters);
			    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // Expression ::= DefinitionAccess 
            {
              Expression RESULT =null;
		Location methodAccessxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location methodAccessxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		DefinitionAccess methodAccess = (DefinitionAccess)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG111

					RESULT = methodAccess;
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // Expression ::= UL_Nouveau Type UL_Parenthese_Ouvrante UL_Parenthese_Fermante 
            {
              Expression RESULT =null;
		Location typexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location typexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		//@@CUPDBG112

					RESULT = new ObjectAllocation(type, new LinkedList<>());
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // Expression ::= UL_Nouveau Type UL_Parenthese_Ouvrante Expressions UL_Parenthese_Fermante 
            {
              Expression RESULT =null;
		Location typexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location typexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location parametersxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location parametersxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		List<Expression> parameters = (List<Expression>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG113

					RESULT = new ObjectAllocation(type, parameters);
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // DefinitionAccess ::= DefinitionAccess UL_Point UL_Identificateur UL_Parenthese_Ouvrante UL_Parenthese_Fermante 
            {
              DefinitionAccess RESULT =null;
		Location objectxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location objectxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		DefinitionAccess object = (DefinitionAccess)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location methodxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location methodxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		String method = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		//@@CUPDBG114

            RESULT = new MethodAccess(object, method, new LinkedList<Expression>());
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DefinitionAccess",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // DefinitionAccess ::= DefinitionAccess UL_Point UL_Identificateur UL_Parenthese_Ouvrante Expressions UL_Parenthese_Fermante 
            {
              DefinitionAccess RESULT =null;
		Location objectxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xleft;
		Location objectxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xright;
		DefinitionAccess object = (DefinitionAccess)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		Location methodxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location methodxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		String method = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location parametresxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location parametresxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		List<Expression> parametres = (List<Expression>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG115

            RESULT = new MethodAccess(object, method, parametres );
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DefinitionAccess",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // DefinitionAccess ::= DefinitionAccess UL_Point UL_Identificateur 
            {
              DefinitionAccess RESULT =null;
		Location objectxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location objectxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		DefinitionAccess object = (DefinitionAccess)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location attributexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location attributexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String attribute = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG116

			RESULT = new AttributeAccess(object, attribute);
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DefinitionAccess",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // DefinitionAccess ::= UL_Identificateur UL_Point UL_Identificateur 
            {
              DefinitionAccess RESULT =null;
		Location objectxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location objectxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		String object = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location attributexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location attributexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String attribute = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG117

			RESULT = new AttributeAccess(object, attribute);
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DefinitionAccess",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // DefinitionAccess ::= UL_Identificateur UL_Point UL_Identificateur UL_Parenthese_Ouvrante UL_Parenthese_Fermante 
            {
              DefinitionAccess RESULT =null;
		Location objectxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location objectxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		String object = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location methodxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location methodxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		String method = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		//@@CUPDBG118

            RESULT = new MethodAccess(object, method, new LinkedList<Expression>() );
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DefinitionAccess",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // DefinitionAccess ::= UL_Identificateur UL_Point UL_Identificateur UL_Parenthese_Ouvrante Expressions UL_Parenthese_Fermante 
            {
              DefinitionAccess RESULT =null;
		Location objectxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xleft;
		Location objectxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xright;
		String object = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		Location methodxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location methodxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		String method = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location parametresxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location parametresxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		List<Expression> parametres = (List<Expression>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG119

			RESULT = new MethodAccess(object, method, parametres );
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DefinitionAccess",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
